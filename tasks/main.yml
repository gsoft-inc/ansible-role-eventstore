# See https://github.com/ansible/ansible/issues/9966
- name: Install apt_key dependencies
  become: true
  apt:
    name:
      - python-urllib3
      - python-openssl
      - python-pyasn1
      - python-pip
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_release == 'trusty'

# See https://github.com/ansible/ansible/issues/9966
- name: install 'ndg-httpsclient'
  pip:
    name: ndg-httpsclient
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_release == 'trusty'

- name: Install pre-built package
  apt:
    deb: "https://packagecloud.io/EventStore/EventStore-OSS/packages/\
      {{ ansible_distribution }}/\
      {{ ansible_distribution_release }}/\
      eventstore-oss_{{ eventstore_version }}_amd64.deb/download.deb"
    state: present

- name: Install es-gencert-cli
  ansible.builtin.unarchive:
    src: "https://github.com/EventStore/es-gencert-cli/releases/download/\
      {{ evenstore_gencert_cli_version }}/\
      es-gencert-cli_{{ evenstore_gencert_cli_version }}_Linux-x86_64.tar.gz"
    dest: /usr/local/bin
    remote_src: yes
  when:
    - eventstore_generate_node_certitificate

- name: Check if node certificate already exists
  stat:
    path: "{{ eventstore_certificate_path }}/{{ eventstore_node_cert_out }}"
  register: node_cert_folder

- name: Generate node certificate
  ansible.builtin.shell:
    cmd: >-
      es-gencert-cli create-node
      -ca-certificate {{ eventstore_ca_cert_path }}
      -ca-key {{ eventstore_ca_key_path }}
      -days {{ eventstore_node_cert_days }}
      -out {{ eventstore_node_cert_out }}
      -ip-addresses {{ eventstore_node_cert_ip_addresses | select | join(',') }}
      -dns-names {{ eventstore_node_cert_dns_names | select | join(',') }}
    chdir: "{{ eventstore_certificate_path }}"
  when:
    - eventstore_generate_node_certitificate
    - node_cert_folder.stat.exists == false

- name: Set node certificate permissions
  ansible.builtin.file:
    path: "{{ eventstore_certificate_path }}/{{ eventstore_node_cert_out }}"
    mode: 0600
    owner: eventstore
    group: eventstore
    state: directory
    recurse: yes
  when:
    - eventstore_generate_node_certitificate

- name: Add configuration
  template:
    src: "{{ eventstore_config_file }}"
    dest: /etc/eventstore/eventstore.conf
  notify:
    - restart eventstore

- name: Ensure service is started and enabled to start at boot
  systemd:
    name: eventstore
    state: started
    enabled: true
  when: not ansible_check_mode

- name: Wait for external HTTP port to become open on the host
  wait_for:
    host: "{{ ext_ip }}"
    port: "{{ ext_http_port }}"
    delay: 5
    timeout: "{{ eventstore_wait_for_http_timeout }}"
  when: eventstore_wait_for_http|default(true)|bool == true

- name: Change admin password
  uri:
    url: "{% if insecure %}http{% else %}https{% endif %}://{{ ext_ip }}:{{ ext_http_port }}/users/admin/command/reset-password"
    method: POST
    body_format: json
    user: admin
    password: "{{ eventstore_admin_password }}"
    force_basic_auth: true
    validate_certs: false
    body: '{"newPassword":"{{ eventstore_admin_new_password }}"}'
    headers:
      Content-Type: "application/json"
      charset: "UTF-8"
    status_code:
    - 200
    - 401
  register: pwd_change_result
  changed_when:
    - pwd_change_result.status == 200
  when:
    - eventstore_admin_new_password is defined
    - eventstore_wait_for_http|default(true)|bool == true
    - insecure == false
  run_once: true